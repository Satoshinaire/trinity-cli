{
  api: {
    getAPIEndpoint: [Getter],
    getBalance: [Getter],
    getClaimAmounts: [Getter],
    getRPCEndpoint: [Getter],
    getTransactionHistory: [Getter],
    getWalletDBHeight: [Getter],
    doClaimAllGas: [Getter],
    doMintTokens: [Getter],
    doSendAsset: [Getter],
    getPrice: [Getter]
  },
  sc: {
    OpCode: {
      PUSH0: 0,
      PUSHF: 0,
      PUSHBYTES1: 1,
      PUSHBYTES75: 75,
      PUSHDATA1: 76,
      PUSHDATA2: 77,
      PUSHDATA4: 78,
      PUSHM1: 79,
      PUSH1: 81,
      PUSHT: 81,
      PUSH2: 82,
      PUSH3: 83,
      PUSH4: 84,
      PUSH5: 85,
      PUSH6: 86,
      PUSH7: 87,
      PUSH8: 88,
      PUSH9: 89,
      PUSH10: 90,
      PUSH11: 91,
      PUSH12: 92,
      PUSH13: 93,
      PUSH14: 94,
      PUSH15: 95,
      PUSH16: 96,
      NOP: 97,
      JMP: 98,
      JMPIF: 99,
      JMPIFNOT: 100,
      CALL: 101,
      RET: 102,
      APPCALL: 103,
      SYSCALL: 104,
      TAILCALL: 105,
      DUPFROMALTSTACK: 106,
      TOALTSTACK: 107,
      FROMALTSTACK: 108,
      XDROP: 109,
      XSWAP: 114,
      XTUCK: 115,
      DEPTH: 116,
      DROP: 117,
      DUP: 118,
      NIP: 119,
      OVER: 120,
      PICK: 121,
      ROLL: 122,
      ROT: 123,
      SWAP: 124,
      TUCK: 125,
      CAT: 126,
      SUBSTR: 127,
      LEFT: 128,
      RIGHT: 129,
      SIZE: 130,
      INVERT: 131,
      AND: 132,
      OR: 133,
      XOR: 134,
      EQUAL: 135,
      INC: 139,
      DEC: 140,
      SIGN: 141,
      NEGATE: 143,
      ABS: 144,
      NOT: 145,
      NZ: 146,
      ADD: 147,
      SUB: 148,
      MUL: 149,
      DIV: 150,
      MOD: 151,
      SHL: 152,
      SHR: 153,
      BOOLAND: 154,
      BOOLOR: 155,
      NUMEQUAL: 156,
      NUMNOTEQUAL: 158,
      LT: 159,
      GT: 160,
      LTE: 161,
      GTE: 162,
      MIN: 163,
      MAX: 164,
      WITHIN: 165,
      SHA1: 167,
      SHA256: 168,
      HASH160: 169,
      HASH256: 170,
      CHECKSIG: 172,
      CHECKMULTISIG: 174,
      ARRAYSIZE: 192,
      PACK: 193,
      UNPACK: 194,
      PICKITEM: 195,
      SETITEM: 196,
      NEWARRAY: 197,
      NEWSTRUCT: 198,
      THROW: 240,
      THROWIFNOT: 241
    },
    ScriptBuilder: [Function: ScriptBuilder],
    createScript: [Function: createScript],
    generateDeployScript: [Function: generateDeployScript],
    default: {
      create: [Object]
    }
  },
  tx: {
    serializeTransaction: [Function: serializeTransaction],
    deserializeTransaction: [Function: deserializeTransaction],
    signTransaction: [Function: signTransaction],
    getTransactionHash: [Function: getTransactionHash],
    serializeTransactionInput: [Getter],
    deserializeTransactionInput: [Getter],
    serializeTransactionOutput: [Getter],
    deserializeTransactionOutput: [Getter],
    serializeTransactionAttribute: [Getter],
    deserializeTransactionAttribute: [Getter],
    serializeWitness: [Getter],
    deserializeWitness: [Getter],
    createClaimTx: [Getter],
    createContractTx: [Getter],
    createInvocationTx: [Getter],
    serialize: [Getter],
    deserialize: [Getter],
    default: {
      create: [Object],
      serialize: [Object],
      deserialize: [Object],
      get: [Object]
    }
  },
  wallet: {
    Account: [Function: Account],
    getPrivateKeyFromWIF: [Getter],
    getWIFFromPrivateKey: [Getter],
    getPublicKeyFromPrivateKey: [Getter],
    getVerificationScriptFromPublicKey: [Getter],
    getScriptHashFromPublicKey: [Getter],
    getAddressFromScriptHash: [Getter],
    getScriptHashFromAddress: [Getter],
    generateSignature: [Getter],
    generatePrivateKey: [Getter],
    generateRandomArray: [Getter],
    isNEP2: [Getter],
    isWIF: [Getter],
    isPrivateKey: [Getter],
    isPublicKey: [Getter],
    isAddress: [Getter],
    encryptWifAccount: [Getter],
    generateEncryptedWif: [Getter],
    encrypt: [Getter],
    decrypt: [Getter],
    encryptWIF: [Getter],
    decryptWIF: [Getter],
    default: {
      create: [Object],
      is: [Object],
      encrypt: [Object],
      decrypt: [Object],
      get: [Object]
    }
  },
  nep5: {
    getTokenInfo: [Function: getTokenInfo],
    getTokenBalance: [Function: getTokenBalance]
  },
  u: {
    ab2str: [Function: ab2str],
    str2ab: [Function: str2ab],
    hexstring2ab: [Function: hexstring2ab],
    ab2hexstring: [Function: ab2hexstring],
    int2hex: [Function: int2hex],
    num2hexstring: [Function: num2hexstring],
    num2fixed8: [Function: num2fixed8],
    fixed82num: [Function: fixed82num],
    num2VarInt: [Function: num2VarInt],
    hexXor: [Function: hexXor],
    reverseArray: [Function: reverseArray],
    reverseHex: [Function: reverseHex],
    StringStream: [Function: StringStream],
    hash160: [Function: hash160],
    hash256: [Function: hash256],
    sha256: [Function: sha256]
  },
  CONST: {
    ASSETS: {
      NEO: 'NEO',
      c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b: 'NEO',
      GAS: 'GAS',
      '602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7': 'GAS'
    },
    ASSET_ID: {
      NEO: 'c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b',
      GAS: '602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7'
    },
    CONTRACTS: {
      TEST_RPX: '5b7074e873973a6ed3708862f219a6fbf4d1c411'
    },
    DEFAULT_RPC: {
      MAIN: 'http://seed1.neo.org:10332',
      TEST: 'http://seed1.neo.org:20332'
    },
    DEFAULT_REQ: {
      jsonrpc: '2.0',
      method: 'getblockcount',
      params: [],
      id: 1234
    },
    NEO_NETWORK: {
      MAIN: 'MainNet',
      TEST: 'TestNet'
    },
    RPC_VERSION: '2.3.2',
    TX_VERSION: 0
  },
  default: {
    api: {
      getAPIEndpoint: [Getter],
      getBalance: [Getter],
      getClaimAmounts: [Getter],
      getRPCEndpoint: [Getter],
      getTransactionHistory: [Getter],
      getWalletDBHeight: [Getter],
      doClaimAllGas: [Getter],
      doMintTokens: [Getter],
      doSendAsset: [Getter],
      getPrice: [Getter]
    },
    CONST: {
      ASSETS: [Object],
      ASSET_ID: [Object],
      CONTRACTS: [Object],
      DEFAULT_RPC: [Object],
      DEFAULT_REQ: [Object],
      NEO_NETWORK: [Object],
      RPC_VERSION: '2.3.2',
      TX_VERSION: 0
    },
    u: {
      ab2str: [Function: ab2str],
      str2ab: [Function: str2ab],
      hexstring2ab: [Function: hexstring2ab],
      ab2hexstring: [Function: ab2hexstring],
      int2hex: [Function: int2hex],
      num2hexstring: [Function: num2hexstring],
      num2fixed8: [Function: num2fixed8],
      fixed82num: [Function: fixed82num],
      num2VarInt: [Function: num2VarInt],
      hexXor: [Function: hexXor],
      reverseArray: [Function: reverseArray],
      reverseHex: [Function: reverseHex],
      StringStream: [Function: StringStream],
      hash160: [Function: hash160],
      hash256: [Function: hash256],
      sha256: [Function: sha256]
    },
    create: {
      script: [Function: createScript],
      scriptBuilder: [Function: scriptBuilder],
      claim: [Function: createClaimTx],
      contract: [Function: createContractTx],
      invocation: [Function: createInvocationTx],
      account: [Function: account],
      privateKey: [Function: generatePrivateKey],
      signature: [Function: generateSignature]
    },
    serialize: {
      attribute: [Function: serializeTransactionAttribute],
      input: [Function: serializeTransactionInput],
      output: [Function: serializeTransactionOutput],
      script: [Function: serializeWitness],
      exclusiveData: [Object],
      tx: [Function: serializeTransaction]
    },
    deserialize: {
      attribute: [Function: deserializeTransactionAttribute],
      input: [Function: deserializeTransactionInput],
      output: [Function: deserializeTransactionOutput],
      script: [Function: deserializeWitness],
      exclusiveData: [Object],
      tx: [Function: deserializeTransaction]
    },
    get: {
      transactionHash: [Function: getTransactionHash],
      privateKeyFromWIF: [Function: getPrivateKeyFromWIF],
      WIFFromPrivateKey: [Function: getWIFFromPrivateKey],
      publicKeyFromPrivateKey: [Function: getPublicKeyFromPrivateKey],
      scriptHashFromPublicKey: [Function: getScriptHashFromPublicKey],
      addressFromScriptHash: [Function: getAddressFromScriptHash],
      scriptHashFromAddress: [Function: getScriptHashFromAddress]
    },
    is: {
      address: [Function: isAddress],
      publicKey: [Function: isPublicKey],
      encryptedKey: [Function: isNEP2],
      privateKey: [Function: isPrivateKey],
      wif: [Function: isWIF]
    },
    encrypt: {
      privateKey: [Function: encrypt]
    },
    decrypt: {
      privateKey: [Function: decrypt]
    }
  }
} {
  api: {
    getAPIEndpoint: [Getter],
    getBalance: [Getter],
    getClaimAmounts: [Getter],
    getRPCEndpoint: [Getter],
    getTransactionHistory: [Getter],
    getWalletDBHeight: [Getter],
    doClaimAllGas: [Getter],
    doMintTokens: [Getter],
    doSendAsset: [Getter],
    getPrice: [Getter]
  },
  sc: {
    OpCode: {
      PUSH0: 0,
      PUSHF: 0,
      PUSHBYTES1: 1,
      PUSHBYTES75: 75,
      PUSHDATA1: 76,
      PUSHDATA2: 77,
      PUSHDATA4: 78,
      PUSHM1: 79,
      PUSH1: 81,
      PUSHT: 81,
      PUSH2: 82,
      PUSH3: 83,
      PUSH4: 84,
      PUSH5: 85,
      PUSH6: 86,
      PUSH7: 87,
      PUSH8: 88,
      PUSH9: 89,
      PUSH10: 90,
      PUSH11: 91,
      PUSH12: 92,
      PUSH13: 93,
      PUSH14: 94,
      PUSH15: 95,
      PUSH16: 96,
      NOP: 97,
      JMP: 98,
      JMPIF: 99,
      JMPIFNOT: 100,
      CALL: 101,
      RET: 102,
      APPCALL: 103,
      SYSCALL: 104,
      TAILCALL: 105,
      DUPFROMALTSTACK: 106,
      TOALTSTACK: 107,
      FROMALTSTACK: 108,
      XDROP: 109,
      XSWAP: 114,
      XTUCK: 115,
      DEPTH: 116,
      DROP: 117,
      DUP: 118,
      NIP: 119,
      OVER: 120,
      PICK: 121,
      ROLL: 122,
      ROT: 123,
      SWAP: 124,
      TUCK: 125,
      CAT: 126,
      SUBSTR: 127,
      LEFT: 128,
      RIGHT: 129,
      SIZE: 130,
      INVERT: 131,
      AND: 132,
      OR: 133,
      XOR: 134,
      EQUAL: 135,
      INC: 139,
      DEC: 140,
      SIGN: 141,
      NEGATE: 143,
      ABS: 144,
      NOT: 145,
      NZ: 146,
      ADD: 147,
      SUB: 148,
      MUL: 149,
      DIV: 150,
      MOD: 151,
      SHL: 152,
      SHR: 153,
      BOOLAND: 154,
      BOOLOR: 155,
      NUMEQUAL: 156,
      NUMNOTEQUAL: 158,
      LT: 159,
      GT: 160,
      LTE: 161,
      GTE: 162,
      MIN: 163,
      MAX: 164,
      WITHIN: 165,
      SHA1: 167,
      SHA256: 168,
      HASH160: 169,
      HASH256: 170,
      CHECKSIG: 172,
      CHECKMULTISIG: 174,
      ARRAYSIZE: 192,
      PACK: 193,
      UNPACK: 194,
      PICKITEM: 195,
      SETITEM: 196,
      NEWARRAY: 197,
      NEWSTRUCT: 198,
      THROW: 240,
      THROWIFNOT: 241
    },
    ScriptBuilder: [Function: ScriptBuilder],
    createScript: [Function: createScript],
    generateDeployScript: [Function: generateDeployScript],
    default: {
      create: [Object]
    }
  },
  tx: {
    serializeTransaction: [Function: serializeTransaction],
    deserializeTransaction: [Function: deserializeTransaction],
    signTransaction: [Function: signTransaction],
    getTransactionHash: [Function: getTransactionHash],
    serializeTransactionInput: [Getter],
    deserializeTransactionInput: [Getter],
    serializeTransactionOutput: [Getter],
    deserializeTransactionOutput: [Getter],
    serializeTransactionAttribute: [Getter],
    deserializeTransactionAttribute: [Getter],
    serializeWitness: [Getter],
    deserializeWitness: [Getter],
    createClaimTx: [Getter],
    createContractTx: [Getter],
    createInvocationTx: [Getter],
    serialize: [Getter],
    deserialize: [Getter],
    default: {
      create: [Object],
      serialize: [Object],
      deserialize: [Object],
      get: [Object]
    }
  },
  wallet: {
    Account: [Function: Account],
    getPrivateKeyFromWIF: [Getter],
    getWIFFromPrivateKey: [Getter],
    getPublicKeyFromPrivateKey: [Getter],
    getVerificationScriptFromPublicKey: [Getter],
    getScriptHashFromPublicKey: [Getter],
    getAddressFromScriptHash: [Getter],
    getScriptHashFromAddress: [Getter],
    generateSignature: [Getter],
    generatePrivateKey: [Getter],
    generateRandomArray: [Getter],
    isNEP2: [Getter],
    isWIF: [Getter],
    isPrivateKey: [Getter],
    isPublicKey: [Getter],
    isAddress: [Getter],
    encryptWifAccount: [Getter],
    generateEncryptedWif: [Getter],
    encrypt: [Getter],
    decrypt: [Getter],
    encryptWIF: [Getter],
    decryptWIF: [Getter],
    default: {
      create: [Object],
      is: [Object],
      encrypt: [Object],
      decrypt: [Object],
      get: [Object]
    }
  },
  nep5: {
    getTokenInfo: [Function: getTokenInfo],
    getTokenBalance: [Function: getTokenBalance]
  },
  u: {
    ab2str: [Function: ab2str],
    str2ab: [Function: str2ab],
    hexstring2ab: [Function: hexstring2ab],
    ab2hexstring: [Function: ab2hexstring],
    int2hex: [Function: int2hex],
    num2hexstring: [Function: num2hexstring],
    num2fixed8: [Function: num2fixed8],
    fixed82num: [Function: fixed82num],
    num2VarInt: [Function: num2VarInt],
    hexXor: [Function: hexXor],
    reverseArray: [Function: reverseArray],
    reverseHex: [Function: reverseHex],
    StringStream: [Function: StringStream],
    hash160: [Function: hash160],
    hash256: [Function: hash256],
    sha256: [Function: sha256]
  },
  CONST: {
    ASSETS: {
      NEO: 'NEO',
      c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b: 'NEO',
      GAS: 'GAS',
      '602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7': 'GAS'
    },
    ASSET_ID: {
      NEO: 'c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b',
      GAS: '602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7'
    },
    CONTRACTS: {
      TEST_RPX: '5b7074e873973a6ed3708862f219a6fbf4d1c411'
    },
    DEFAULT_RPC: {
      MAIN: 'http://seed1.neo.org:10332',
      TEST: 'http://seed1.neo.org:20332'
    },
    DEFAULT_REQ: {
      jsonrpc: '2.0',
      method: 'getblockcount',
      params: [],
      id: 1234
    },
    NEO_NETWORK: {
      MAIN: 'MainNet',
      TEST: 'TestNet'
    },
    RPC_VERSION: '2.3.2',
    TX_VERSION: 0
  },
  default: {
    api: {
      getAPIEndpoint: [Getter],
      getBalance: [Getter],
      getClaimAmounts: [Getter],
      getRPCEndpoint: [Getter],
      getTransactionHistory: [Getter],
      getWalletDBHeight: [Getter],
      doClaimAllGas: [Getter],
      doMintTokens: [Getter],
      doSendAsset: [Getter],
      getPrice: [Getter]
    },
    CONST: {
      ASSETS: [Object],
      ASSET_ID: [Object],
      CONTRACTS: [Object],
      DEFAULT_RPC: [Object],
      DEFAULT_REQ: [Object],
      NEO_NETWORK: [Object],
      RPC_VERSION: '2.3.2',
      TX_VERSION: 0
    },
    u: {
      ab2str: [Function: ab2str],
      str2ab: [Function: str2ab],
      hexstring2ab: [Function: hexstring2ab],
      ab2hexstring: [Function: ab2hexstring],
      int2hex: [Function: int2hex],
      num2hexstring: [Function: num2hexstring],
      num2fixed8: [Function: num2fixed8],
      fixed82num: [Function: fixed82num],
      num2VarInt: [Function: num2VarInt],
      hexXor: [Function: hexXor],
      reverseArray: [Function: reverseArray],
      reverseHex: [Function: reverseHex],
      StringStream: [Function: StringStream],
      hash160: [Function: hash160],
      hash256: [Function: hash256],
      sha256: [Function: sha256]
    },
    create: {
      script: [Function: createScript],
      scriptBuilder: [Function: scriptBuilder],
      claim: [Function: createClaimTx],
      contract: [Function: createContractTx],
      invocation: [Function: createInvocationTx],
      account: [Function: account],
      privateKey: [Function: generatePrivateKey],
      signature: [Function: generateSignature]
    },
    serialize: {
      attribute: [Function: serializeTransactionAttribute],
      input: [Function: serializeTransactionInput],
      output: [Function: serializeTransactionOutput],
      script: [Function: serializeWitness],
      exclusiveData: [Object],
      tx: [Function: serializeTransaction]
    },
    deserialize: {
      attribute: [Function: deserializeTransactionAttribute],
      input: [Function: deserializeTransactionInput],
      output: [Function: deserializeTransactionOutput],
      script: [Function: deserializeWitness],
      exclusiveData: [Object],
      tx: [Function: deserializeTransaction]
    },
    get: {
      transactionHash: [Function: getTransactionHash],
      privateKeyFromWIF: [Function: getPrivateKeyFromWIF],
      WIFFromPrivateKey: [Function: getWIFFromPrivateKey],
      publicKeyFromPrivateKey: [Function: getPublicKeyFromPrivateKey],
      scriptHashFromPublicKey: [Function: getScriptHashFromPublicKey],
      addressFromScriptHash: [Function: getAddressFromScriptHash],
      scriptHashFromAddress: [Function: getScriptHashFromAddress]
    },
    is: {
      address: [Function: isAddress],
      publicKey: [Function: isPublicKey],
      encryptedKey: [Function: isNEP2],
      privateKey: [Function: isPrivateKey],
      wif: [Function: isWIF]
    },
    encrypt: {
      privateKey: [Function: encrypt]
    },
    decrypt: {
      privateKey: [Function: decrypt]
    }
  }
}
